@startuml Datenanalyse Client

actor       Nutzer          as n
entity      System          as s    #DA70D5

box AnalyseClient
participant ClientGUI       as cg
participant Client          as c
participant ConfigHeatmap   as ch
participant ConfigDiagramm  as cd
participant Diagramm        as d
participant Verlauf         as v
participant Heatmap         as h
participant Analyse         as a
end box

collections SpeicherMedium  as sm

activate n
activate s

n -> s: Start Client
s -> cg: showClientGUI()
activate cg
activate c

== Input ==
loop analyseTypes.size == 0
    n -> s: Auswahl Analyse Typen
    s -> cg: Klickinformation
    cg -> c: setAnalyseTypes(selectedAnalyseTypes)
    c --> cg: boolean [analyseTypesSet]
    alt !analyseTypesSet
        cg --> cg: Keine Analyse Typen ausgewählt
        cg --> n: Try Again
    end
end

loop data == null
    n -> s: Eingabe benötigter Daten (Zeitraum & ToolType)
    s -> cg: Tastaturinformationen
    cg -> c: getData(start, end, dataType)
    alt start < end && dataType != null
        c -> sm: Abfrage Daten
        activate sm
        alt dataFound
            sm --> c: Daten setzen
        else dataNotFound
            sm --> c: Daten nicht gefunden
            deactivate sm
            c --> cg: Daten nicht gefunden
            cg --> n: Daten nicht gefunden. Try again
        end
    else start > end || dataType == null
        c --> cg: Falsche Eingabe
        cg --> n: Falsche Eingabe. Try again
    end
end

alt analyseTypes contains COMPHEATMAP
    loop dataForComp == null
        n -> s: Eingabe benötigter Daten (Zeitraum & ToolType)
        s -> cg: Tastaturinformationen
        cg -> c: getDataForComp(start, end, dataType)
        alt start < end && dataType != null && data.toolType == dataForComp.toolType
            c -> sm: Abfrage Daten
            activate sm
            alt dataFound
                sm --> c: Daten setzen
            else dataNotFound
                sm --> c: Daten nicht gefunden
                deactivate sm
                c --> cg: Daten nicht gefunden
                cg --> n: Daten nicht gefunden. Try again
            end
        else start > end || dataType == null || data.toolType != dataForComp.toolType
            c --> cg: Falsche Eingabe
            cg --> n: Falsche Eingabe. Try again
        end
    end
end

loop confHm == null
    n -> s: Konfiguration Heatmap
    s -> cg: Klick- und Tastaturinformationen
    activate ch
    cg -> ch: setMinColor(float[3])
    ch --> cg: boolean
    cg -> ch: setMaxColor(float[3])
    ch --> cg: boolean
    cg -> ch: setMinDiff(float[3])
    ch --> cg: boolean
    cg -> ch: setMaxDiff(float[3])
    ch --> cg: boolean
    cg -> ch: setGrid(boolean)
    cg -> ch: setImage(boolean)
    deactivate ch
    alt confHm korrekt
        cg -> c: setConfigAnalyseHm(confHm)
        c --> cg: Konfiguration gesetzt (confHm != null)
    end
end

loop confDia == null
    n -> s: Konfiguration Diagramm
    s -> cg: Klick- und Tastaturinformationen
    activate cd
    cg -> cd: setAmountAreas(amountAreas)
    cd --> cg: boolean
    cg -> cd: setNewTime(float, float)
    cd --> cg: boolean
    cg -> cd: setStepsBetween(int)
    cd --> cg: boolean
    deactivate cd
    alt confDia korrekt
        cg -> c: setConfigAnalyseDia(confDia)
        c --> cg: Konfiguration gesetzt (confDia != null)
    end
end

== Analyse ==
cg -> c: analyseData()
opt analyseTypes contains HEATMAP
    c -> h: Heatmap(data, confHm)
    c -> h: createHeatmap()
    activate h
    h -> a: calcRelFreq(data)
    activate a
    a --> h: float[*][*]
    deactivate a
    h --> c: String
    deactivate h
end
opt analyseTypes contains COMPHEATMAP
    c -> h: Heatmap(data, confHm)
    c -> h: createHeatmap() [Heatmap1]
    activate h
    h -> a: calcRelFreq(data)
    activate a
    a --> h: float[*][*]
    deactivate a
    h --> c: String
    deactivate h
    c -> h: Heatmap(dataForComp, confHm)
    c -> h: createHeatmap() [Heatmap2]
    activate h
    h -> a: calcRelFreq(dataForComp)
    activate a
    a --> h: float[*][*]
    deactivate a
    h --> c: String
    deactivate h
    c -> h: compHeatmaps(Heatmap1, Heatmap2)
    activate h
    h --> c: String
    deactivate h
end
opt analyseTypes contains VERLAUF
    c -> v: Verlauf(data)
    c -> v: createVerlauf()
    activate v
    v -> a: createTimeTable(data)
    activate a
    a --> v: float[*][*] (diagrammData)
    deactivate a
    v -> v: drawDiagramm(diagrammData)
    v --> c: String
    deactivate v
end
opt analyseTypes contains RELFRQIMGAREA
    c -> d: Diagramm(data, confDia)
    c -> d: createRelFreqImgArea()
    activate d
    d -> a: calcRelFreq(data)
    activate a
    a --> d: float[*][*]
    deactivate a
    d -> d: drawDiagramm(diagrammData, RELFRQIMGAREA)
    d --> c: String
    deactivate d
end
opt analyseTypes contains VIEWTIMEDISTR
    c -> d: Diagramm(data, confDia)
    c -> d: createViewTimeDistr()
    activate d
    d -> a: createTimeTable(data)
    activate a
    a --> d: float[*][*]
    deactivate a
    d -> d: calcViewTimeDistr(timeTableData)
    d -> d: drawDiagramm(diagrammData, VIEWTIMEDISTR)
    d --> c: String
    deactivate d
end

== Output ==
loop !click on exit
    cg -> c: displayAnalyzedData()
    c --> cg: Ausgabe Daten
    cg -> n: Anzeige
    n -> s: Click?
    s -> cg: Klickinformation
    alt click on export
        cg -> c: export()
        c -> s: save to
        c --> cg: Export erfolgreich
    else click on exportRaw
        cg -> c: exportRaw()
        c -> s: save to
        c --> cg: Export erfolgreich
    else click on exit
        cg -> cg: exit
    end
    
end
deactivate  c
deactivate  cg

'wer es bis hier hin geschafft hat: good job
@enduml
