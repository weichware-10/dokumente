@startuml analyseclient

' === ANALYSE CLIENT ===
package Analyse-Client{

    ' Client
    class Client {
        - data: Util.TrialData
        - dataForComp: Util.TrialData
        - analyseTypes: AnalyseType[0..5]
        - analyzedData: String[*]
        - confHm: ConfigHeatmap
        - confDia: ConfigDiagramm
        __public methods__
        + getData(start: Date, end: Date, dataType: Util.ToolType): boolean
        + getDataForComp(start: Date, end: Date): boolean
        + setAnalyseTypes(selectedAnalyseTypes: AnalyseType[0..5]): boolean
        + getAnalyseTypes(): AnalyseType[0..5]
        + setConfigAnalyseHm(confHm: ConfigHeatmap)
        + setConfigAnalyseDia(confDia: ConfigDiagramm)
        + displayAnalyzedData(): void
        + export(): boolean
        + exportRaw(): boolean
        + analyseData(): void
    }

    ' Analyse
    abstract Analyse {
        - calcRelFreq(data: Util.TrialData): float[*][*]
        - createTimeTable(data: Util.TrialData): float[*][*]
    }

    ' Heatmap
    class Heatmap {
        - heatmap: float[*][*]
        - data: Util.TrialData
        - confHm: ConfigHeatmap
        __public methods__
        + Heatmap(data: Util.TrialData, confHm: ConfigHeatmap) 
        + createHeatmap(): String
        {static} compHeatmaps(heatmap1: Heatmap, heatmap2: Heatmap): String
    }

    ' Verlauf
    class Verlauf {
        - data: Util.TrialData
        __public method__
        + Verlauf(data: Util.TrialData)
        + createVerlauf(): String
        __private method__
        - drawDiagramm(diagrammData: float[*][*]): String
    }

    ' Diagramm
    class Diagramm {
        - data: Util.TrialData
        - confDia: ConfigDiagramm
        __public methods__
        + Diagramm(data: Util.TrialData, confDia: ConfigDiagramm)
        + createRelFreqImgArea(): String
        + createViewTimeDistr(): String
        __private methods__
        - calcViewTimeDistr(timeTableData: float[*][*]): float[*]
        - drawDiagramm(diagrammData: float[*], type: DiagrammType): String
    }

    ' ConfigDiagramm
    class ConfigDiagramm {
        - amountAreas: int
        - minTime: float
        - maxTime: float
        - stepsBetween: int
        __public methods__
        + setAmountAreas(amountAreas: int): boolean
        + getAmountAreas(): int
        + setNewTime(minTime: float, maxTime: float): boolean
        + getMinTime(): float
        + setStepsBetween(stepsBetween: int): boolean
        + getStepsBetween(): int
    }

    ' ConfigHeatmap
    class ConfigHeatmap {
        - minColor: float[3]
        - maxColor: float[3]
        - grid: boolean
        - image: boolean
        - minDiff: float[3]
        - maxDiff: float[3]
        __public methods__
        + setMinColor(minColor: float[3]): boolean
        + getMinColor(): float[3]
        + setMaxColor(maxColor: float[3]): boolean
        + getMaxColor(): float[3]
        + setMinDiff(minDiff: float[3]): boolean
        + getMinDiff(): float[3]
        + setMaxDiff(maxDiff: float[3]): boolean
        + getMaxDiff(): float[3]
        + setGrid(grid: boolean): void
        + isGrid(): boolean
        + setImage(image: boolean): void
        + isImage(): boolean
    }

    ' DiagrammType
    enum DiagrammType {
        RELFRQIMGAREA
        VIEWTIMEDISTR 
    }

    ' Type
    enum AnalyseType {
        HEATMAP
        COMPHEATMAP
        VERLAUF
        RELFRQIMGAREA
        VIEWTIMEDISTR
    }

    ' ClientGUI
    class ClientGUI {
        - client: Client
        __public method__
        + showClientGUI(): void
    }

    ' Vererbung
    Analyse <|-u- Heatmap
    Analyse <|-u- Verlauf
    Analyse <|-u- Diagramm

    ' Interaktionen
    Client -d-> Heatmap
    Client -d-> Verlauf
    Client -d-> Diagramm
    Client -l- AnalyseType
    Client <-r- ClientGUI : < graphische BenutzeroberflÃ¤che
    Diagramm -- DiagrammType
    ConfigDiagramm -- Diagramm
    ConfigDiagramm -r- Client
    ConfigHeatmap -- Heatmap
    ConfigHeatmap -l- Client

}

' Blackbox
package SpeicherMedium {}

package Util {

    ' Typen der erhobenen Daten
    enum ToolType {
        ZOOMMAPS
        EYETRACKING
        CODECHARTS
    }

    ' TrialData
    class TrialData<t: ToolType> {
        - toolType: ToolType
        - trialId: String
        - configId: String
        - startTime: DateTime
        - dataPoints: ArrayList<DataPoint>
    }

    ' DataPoints
    class DataPoint {
        - dataId: int
        - timeOffset: float
        - coordinates: int[2]
        - rasterSize: int[2]
        - zoomlevel: float
        + DataPoint()
    }

    ' Interaktionen
    TrialData -l- ToolType
    TrialData - DataPoint
}

() System #DA70D5

' Interaktionen
Client -u- System: > save to
Client -u- SpeicherMedium : < gets Data

@enduml
